package cmd

import (
	"fmt"
	"os/exec"

	"github.com/spf13/cobra"
)

// openTestCmd represents the openTest command
var openTestCmd = &cobra.Command{
	Use:   "test",
	Short: "Open test results in the browser",
	Long: `Open test results for all runs for test ID 123:

	reflectctl open test 123
	
Open test results in the browser for test ID 123 with run ID 456:

	reflectctl open test 123 -r 456

You can find test ID and run ID by viewing the status of a test run by execution ID:

	reflectctl executions status <execution ID>
`,
	RunE: func(cmd *cobra.Command, args []string) error {
		baseURL := "https://app.reflect.run"
		id := args[0]
		url := fmt.Sprintf("%s/tests/%v/definition", baseURL, id)

		run, err := cmd.Flags().GetString("run")

		if err != nil {
			return err
		}

		if run != "" {
			url = fmt.Sprintf("%s/tests/%v/runs/%s", baseURL, id, run)
		}

		// TODO: Make this cross OS compatible
		err = exec.Command("open", url).Start()

		return err
	},
}

func init() {
	openCmd.AddCommand(openTestCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// openTestCmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// openTestCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
	openTestCmd.Flags().StringP("run", "r", "", "Run ID")
}
